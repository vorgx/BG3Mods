function IsDeathKnightStrike()
    return SpellId('Target_FrostStrike')|SpellId('Target_Obliterate')|SpellId('Target_ScourgeStrike')|SpellId('Target_FesteringStrike')|SpellId('Target_HeartStrike')|SpellId('Target_DeathStrike')|SpellId('Projectile_DeathCoil')
end

function SuccessRate(threshold)
    local random_num = math.random(1,100)
    return ConditionResult(random_num <= threshold)
end


function HasMaximumFesteringWound(entity)
    local entity = entity or context.Target
    return ConditionResult(GetStatusDuration('DK_FesteringWound', entity) >= 6)
end

function GetWoundBurst(entity, threshold)
    local entity = entity or context.Target
    return ConditionResult(GetStatusDuration('DK_FesteringWound', entity) >= threshold)
end

function NextWoundApplyWillMax()
    local entity = context.Target
    return ConditionResult(GetStatusDuration('DK_FesteringWound', context.Target) + GetStatusDuration('DK_Buff_VileContagion_Tactical', context.Source) > 6)
end



function HasMaximumBloodShield(entity)
    local entity = entity or context.Target
    local base = 25
    if HasPassive('Artifact_Blood_RedThirst', context.Source).Result then
        local base = 35
    end
    return ConditionResult(GetStatusDuration('Buff_BloodShield', entity) >= math.floor(entity.MaxHP*base/100)-1)
end 

function NextDeathStrikeMaxBloodShield()
    local entity = context.Source
    local base = 25
    local healing_factor = 1

    if HasPassive('Artifact_Blood_RedThirst', context.Source).Result then
        local base = 35
    end

    if HasStatus('DK_Buff_VampiricBlood', context.Source).Result then
        local healing_factor = 2
    end

    if IsDeathStrikeMinHeal().Result then
        return ConditionResult(GetStatusDuration('Buff_BloodShield', entity) + healing_factor*entity.MaxHP/20 >= math.floor(entity.MaxHP*base/100)-1)
    else
        return ConditionResult(GetStatusDuration('Buff_BloodShield', entity) + healing_factor*GetStatusDuration('DK_DeathStrike_HealCount', entity)>= math.floor(entity.MaxHP*base/100)-1)
    end
end

function IsDeathStrikeMinHeal()
    return ConditionResult(GetStatusDuration('DK_DeathStrike_HealCount', context.Source) <= math.floor(context.Source.MaxHP/10))
end


function IsBloodDKHeal()
    return SpellId('Target_HeartStrike')|SpellId('Target_DeathStrike')|SpellId('Target_DeathPact')
end

function IsHeartStrikeInterrupt()
    return SpellId('Interrupt_HeartStrike')|SpellId('Interrupt_HeartStrike_Critical')|SpellId('Interrupt_HeartStrike_Counter')
end

function StongerBloodShieldBurst()
    return (HasPassive('Artifact_Blood_RedThirst',context.Target) & HasStatus('DK_DeathDecay_Owner',context.Target))
end


function BloodShieldExhausted(entity)
    local entity = entity or context.Target
    return ConditionResult(GetStatusDuration('Buff_BloodShield', entity) < 0)
end

function DKExtraAttackSpell()
    return SpellId('Projectile_DeathCoil')
end

function DKExtraAttackCheck()
    return (HasStringInSpellRoll('WeaponAttack') | HasStringInSpellRoll('UnarmedAttack') | HasStringInSpellRoll('ThrowAttack') | SpellId('Target_CommandersStrike') | SpellId('Projectile_ArrowOfSmokepowder')| DKExtraAttackSpell()) & HasUseCosts('ActionPoint')
end

function HasFallenPrinceBlades()
    return (HasStatus('DK_Artifact_FPB_Main_Tag',context.Source) & HasStatus('DK_Artifact_FPB_Off_Tag',context.Source))
end

function IsSingleFrostRuneSpell()
    return SpellId('Projectile_ChainsOfIce')|SpellId('Target_MindFreeze')|SpellId('Projectile_HowlingBlast')|SpellId('Interrupt_HowlingBlast')
end

function IsDoubleFrostRuneSpell()
    return SpellId('Target_Obliterate')
end

function GetFrostPillar(threshold)
    return ConditionResult(GetStatusDuration('DK_Buff_FrostPillar_Count', context.Source) >= threshold)
end

function IsFrostStrike()
    return SpellId('Target_FrostStrike')| SpellId('Interrupt_FrostStrike')| SpellId('Interrupt_FrostStrike_Critical')
end
